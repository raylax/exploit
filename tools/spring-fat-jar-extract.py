# -*- coding: utf8 -*-

import zipfile
import os
import argparse

def extract(jar_path, output_path):
    if not os.path.exists(jar_path):
        print("[!] jar file [%s] not exists !!!" % jar_path)
        exit(-1)
    if not output_path:
        output_path = jar_path + "_output"
    if not os.path.exists(output_path):
        os.makedirs(output_path)
    jar_name = jar_path[jar_path.rindex("/")+1:]
    main_jar = os.path.join(output_path, jar_name)
    libs = 0
    with zipfile.ZipFile(jar_path, "r") as jar_file:
        with zipfile.ZipFile(main_jar, "w") as output:
            for name in jar_file.namelist():
                info = jar_file.getinfo(name)
                if info.is_dir():
                    continue
                if name.startswith("BOOT-INF/classes/"):
                    output.writestr(name[17:], jar_file.read(name))
                elif name.startswith("META-INF/"):
                    output.writestr(name, jar_file.read(name))
                elif name.startswith("BOOT-INF/lib/") and name.endswith(".jar"):
                    lib_jar = name[13:]
                    print("[*] Writing lib file [%s]" % lib_jar)
                    with open(os.path.join(output_path, lib_jar), "wb") as f:
                        f.write(jar_file.read(name))
                    libs += 1
        print("[*] Writing file [%s]" % jar_name)
    print("[*] Write %d lib(s)" % libs)

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("-j", dest="jar_path", required=True, help="jar file path")
    parser.add_argument("-o", dest="output_path", help="output path")
    args = parser.parse_args()
    extract(args.jar_path, args.output_path)
